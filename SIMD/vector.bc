; ModuleID = 'vector.c'
source_filename = "vector.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [19 x i8] c"output:%f,%f,%f,%f\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %__w.addr.i11 = alloca float, align 4
  %.compoundliteral.i12 = alloca <4 x float>, align 16
  %__a.addr.i10 = alloca <4 x float>, align 16
  %__b.addr.i = alloca <4 x float>, align 16
  %__p.addr.i = alloca float*, align 8
  %__a.addr.i = alloca <4 x float>, align 16
  %__w.addr.i = alloca float, align 4
  %.compoundliteral.i = alloca <4 x float>, align 16
  %input_1 = alloca float, align 4
  %input_2 = alloca float, align 4
  %output = alloca [4 x float], align 16
  %a = alloca <4 x float>, align 16
  %b = alloca <4 x float>, align 16
  %c = alloca <4 x float>, align 16
  store float 5.000000e+00, float* %input_1, align 4
  store float 1.000000e+01, float* %input_2, align 4
  %0 = load float, float* %input_1, align 4
  store float %0, float* %__w.addr.i, align 4
  %1 = load float, float* %__w.addr.i, align 4
  %vecinit.i = insertelement <4 x float> undef, float %1, i32 0
  %2 = load float, float* %__w.addr.i, align 4
  %vecinit1.i = insertelement <4 x float> %vecinit.i, float %2, i32 1
  %3 = load float, float* %__w.addr.i, align 4
  %vecinit2.i = insertelement <4 x float> %vecinit1.i, float %3, i32 2
  %4 = load float, float* %__w.addr.i, align 4
  %vecinit3.i = insertelement <4 x float> %vecinit2.i, float %4, i32 3
  store <4 x float> %vecinit3.i, <4 x float>* %.compoundliteral.i, align 16
  %5 = load <4 x float>, <4 x float>* %.compoundliteral.i, align 16
  store <4 x float> %5, <4 x float>* %a, align 16
  %6 = load float, float* %input_1, align 4
  store float %6, float* %__w.addr.i11, align 4
  %7 = load float, float* %__w.addr.i11, align 4
  %vecinit.i13 = insertelement <4 x float> undef, float %7, i32 0
  %8 = load float, float* %__w.addr.i11, align 4
  %vecinit1.i14 = insertelement <4 x float> %vecinit.i13, float %8, i32 1
  %9 = load float, float* %__w.addr.i11, align 4
  %vecinit2.i15 = insertelement <4 x float> %vecinit1.i14, float %9, i32 2
  %10 = load float, float* %__w.addr.i11, align 4
  %vecinit3.i16 = insertelement <4 x float> %vecinit2.i15, float %10, i32 3
  store <4 x float> %vecinit3.i16, <4 x float>* %.compoundliteral.i12, align 16
  %11 = load <4 x float>, <4 x float>* %.compoundliteral.i12, align 16
  store <4 x float> %11, <4 x float>* %b, align 16
  %12 = load <4 x float>, <4 x float>* %a, align 16
  %13 = load <4 x float>, <4 x float>* %b, align 16
  store <4 x float> %12, <4 x float>* %__a.addr.i10, align 16
  store <4 x float> %13, <4 x float>* %__b.addr.i, align 16
  %14 = load <4 x float>, <4 x float>* %__a.addr.i10, align 16
  %15 = load <4 x float>, <4 x float>* %__b.addr.i, align 16
  %add.i = fadd <4 x float> %14, %15
  store <4 x float> %add.i, <4 x float>* %c, align 16
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %output, i32 0, i32 0
  %16 = load <4 x float>, <4 x float>* %c, align 16
  store float* %arraydecay, float** %__p.addr.i, align 8
  store <4 x float> %16, <4 x float>* %__a.addr.i, align 16
  %17 = load <4 x float>, <4 x float>* %__a.addr.i, align 16
  %18 = load float*, float** %__p.addr.i, align 8
  %19 = bitcast float* %18 to <4 x float>*
  store <4 x float> %17, <4 x float>* %19, align 16
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %output, i64 0, i64 0
  %20 = load float, float* %arrayidx, align 16
  %conv = fpext float %20 to double
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %output, i64 0, i64 1
  %21 = load float, float* %arrayidx3, align 4
  %conv4 = fpext float %21 to double
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %output, i64 0, i64 2
  %22 = load float, float* %arrayidx5, align 8
  %conv6 = fpext float %22 to double
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %output, i64 0, i64 3
  %23 = load float, float* %arrayidx7, align 4
  %conv8 = fpext float %23 to double
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), double %conv, double %conv4, double %conv6, double %conv8)
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (trunk 282832)"}
